{
	"info": {
		"_postman_id": "f414c43a-1595-45a2-af3c-772c1c68e9b5",
		"name": "paceym_project",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26747504"
	},
	"item": [
		{
			"name": "Caregivers (users)",
			"item": [
				{
					"name": "Get all users",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/users",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user_id_01 from token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// NOTE: this test assumes the caller has already created a user (see {{app_url}})\r",
									"// after the jwt is copied to the auth for this request, the user id \r",
									"// corresponding to that user will be set\r",
									"\r",
									"pm.environment.set(\"user_id_01\", pm.response.json()[\"id\"]);\r",
									"\r",
									"pm.test(\"200 status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token_01}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/me",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user_id_02 from token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// NOTE: this test assumes the caller has already created a user (see {{app_url}})\r",
									"// after the jwt is copied to the auth for this request, the user id \r",
									"// corresponding to that user will be set\r",
									"\r",
									"pm.environment.set(\"user_id_02\", pm.response.json()[\"id\"]);\r",
									"\r",
									"pm.test(\"200 status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token_02}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/me",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"me"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Children",
			"item": [
				{
					"name": "Create child (invalid, missing birthday)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"400 status code\", function () {\r",
									"    //Check for 400 status code\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"400 error message\", function () {\r",
									"     //Check for appropriate error message\r",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request is missing the following required attributes: ['birthday']\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"A\",\r\n    \"premature_weeks\": 100,\r\n    \"provider_code\": \"ABC\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/child",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"child"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create child (invalid attribute values)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"403 status code\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"400 error message\", function () {\r",
									"     //Check for appropriate error message\r",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The name must be between 2 and 40 characters; Failed to validate birthday: Incorrect birthday, expected in format %Y-%m-%d; The provider_code must be 6 characters; The premature_weeks must be between 0 and 40\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"A\",\r\n    \"birthday\": \"21-01-31\",\r\n    \"premature_weeks\": 100,\r\n    \"provider_code\": \"ABC\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/child",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"child"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create child (invalid birthday)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"403 status code\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"400 error message\", function () {\r",
									"     //Check for appropriate error message\r",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The name must be between 2 and 40 characters; Failed to validate birthday: Child is too old, max age is 66 months\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"AbcdefghijklmnopqrstuvwxyzAbcdefghijklmnopqrstuv\",\r\n    \"birthday\": \"2000-01-31\",\r\n    \"premature_weeks\": 0,\r\n    \"provider_code\": \"ABCDEF\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/child",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"child"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create child 01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Set child id environment variable from response\r",
									"pm.environment.set(\"child_id_01\", pm.response.json()[\"id\"]);\r",
									"\r",
									"pm.test(\"201 status code\", function () {\r",
									"    //Check for 201 status code\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"content is valid\", function () {\r",
									"   //Check if the response content is valid and matches the expected values\r",
									"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Ari\");\r",
									"   pm.expect(pm.response.json()[\"birthday\"]).to.eq(\"2022-06-04\");\r",
									"   pm.expect(pm.response.json()[\"premature_weeks\"]).to.eq(1);\r",
									"   pm.expect(pm.response.json()[\"provider_code\"]).to.eq(\"ABCDEF\");\r",
									"   //Check if the self url is correct\r",
									"   const self_url = pm.environment.get(\"app_url\") + \"/child/\" + pm.response.json()[\"id\"];\r",
									"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Ari\",\r\n    \"birthday\": \"2022-06-04\",\r\n    \"premature_weeks\": 1,\r\n    \"provider_code\": \"ABCDEF\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/child",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"child"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create child 02",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Set child id environment variable from response\r",
									"pm.environment.set(\"child_id_02\", pm.response.json()[\"id\"]);\r",
									"\r",
									"pm.test(\"201 status code\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"content is valid\", function () {\r",
									"   //Check if the response content is valid and matches the expected values\r",
									"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Bobby\");\r",
									"   pm.expect(pm.response.json()[\"birthday\"]).to.eq(\"2022-07-30\");\r",
									"   pm.expect(pm.response.json()[\"premature_weeks\"]).to.eq(2);\r",
									"   pm.expect(pm.response.json()[\"provider_code\"]).to.eq(\"ABCDEG\");\r",
									"   //Check if the self url is correct\r",
									"   const self_url = pm.environment.get(\"app_url\") + \"/child/\" + pm.response.json()[\"id\"];\r",
									"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Bobby\",\r\n    \"birthday\": \"2022-07-30\",\r\n    \"premature_weeks\": 2,\r\n    \"provider_code\": \"ABCDEG\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/child",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"child"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create child 03",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Set child id environment variable from response\r",
									"pm.environment.set(\"child_id_03\", pm.response.json()[\"id\"]);\r",
									"\r",
									"pm.test(\"201 status code\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"content is valid\", function () {\r",
									"   //Check if the response content is valid and matches the expected values\r",
									"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Carl\");\r",
									"   pm.expect(pm.response.json()[\"birthday\"]).to.eq(\"2020-01-30\");\r",
									"   pm.expect(pm.response.json()[\"premature_weeks\"]).to.eq(3);\r",
									"   pm.expect(pm.response.json()[\"provider_code\"]).to.eq(\"ABCDEH\");\r",
									"   //Check if the self url is correct\r",
									"   const self_url = pm.environment.get(\"app_url\") + \"/child/\" + pm.response.json()[\"id\"];\r",
									"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Carl\",\r\n    \"birthday\": \"2020-01-30\",\r\n    \"premature_weeks\": 3,\r\n    \"provider_code\": \"ABCDEH\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/child",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"child"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create child 04",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Set child id environment variable from response\r",
									"pm.environment.set(\"child_id_04\", pm.response.json()[\"id\"]);\r",
									"\r",
									"pm.test(\"201 status code\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"content is valid\", function () {\r",
									"   //Check if the response content is valid and matches the expected values\r",
									"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Donnie\");\r",
									"   pm.expect(pm.response.json()[\"birthday\"]).to.eq(\"2019-01-30\");\r",
									"   pm.expect(pm.response.json()[\"premature_weeks\"]).to.eq(0);\r",
									"   pm.expect(pm.response.json()[\"provider_code\"]).to.eq(\"ABCDEI\");\r",
									"   //Check if the self url is correct\r",
									"   const self_url = pm.environment.get(\"app_url\") + \"/child/\" + pm.response.json()[\"id\"];\r",
									"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Donnie\",\r\n    \"birthday\": \"2019-01-30\",\r\n    \"premature_weeks\": 0,\r\n    \"provider_code\": \"ABCDEI\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/child",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"child"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete child (invalid id)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"403 status code\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"403 error message\", function () {",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Not authorized\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token_01}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/child/01",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"child",
								"01"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all activities (w/ pagination)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/child",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"child"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get children of user 01 (should be empty)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"content is valid\", function () {\r",
									"   //Check if the response content is valid and matches the expected values\r",
									"//    pm.expect(pm.response.json()[\"child\"]).to.eq([]);   \r",
									"   pm.expect(pm.response.json()[\"total_items\"]).to.eq(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token_01}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/child",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"child"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign child 01 to user 01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 status code\", function () {\r",
									"    //Check for appropriate 204 status code\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token_01}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{app_url}}/child/{{child_id_01}}/users/{{user_id_01}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"child",
								"{{child_id_01}}",
								"users",
								"{{user_id_01}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign child 01 to user 01 (second time should fail 403)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"403 status code\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"400 error message\", function () {\r",
									"     //Check for appropriate error message\r",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Child already assigned to user\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token_01}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{app_url}}/child/{{child_id_01}}/users/{{user_id_01}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"child",
								"{{child_id_01}}",
								"users",
								"{{user_id_01}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign child 02 to user 01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 status code\", function () {\r",
									"    //Check for appropriate 204 status code\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token_01}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{app_url}}/child/{{child_id_02}}/users/{{user_id_01}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"child",
								"{{child_id_02}}",
								"users",
								"{{user_id_01}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign child 03 to user 01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 status code\", function () {\r",
									"    //Check for appropriate 204 status code\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token_01}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{app_url}}/child/{{child_id_03}}/users/{{user_id_01}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"child",
								"{{child_id_03}}",
								"users",
								"{{user_id_01}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update child 01 (invalid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"400 status code\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"400 error message\", function () {\r",
									"     //Check for appropriate error message\r",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request is missing the following required attributes: ['name', 'birthday']\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token_01}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"premature_weeks\": 10,\r\n    \"provider_code\": \"FEDCBA\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/child/{{child_id_01}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"child",
								"{{child_id_01}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update child 01 (valid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token_01}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Ari (updated)\",\r\n    \"birthday\": \"2022-06-05\",\r\n    \"premature_weeks\": 10,\r\n    \"provider_code\": \"FEDCBA\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/child/{{child_id_01}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"child",
								"{{child_id_01}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update child 01 (name and code only)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"content is valid\", function () {\r",
									"   //Check if the response content is valid and matches the expected values\r",
									"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Ari Lastname\");\r",
									"   pm.expect(pm.response.json()[\"birthday\"]).to.eq(\"2022-06-05\");\r",
									"   pm.expect(pm.response.json()[\"premature_weeks\"]).to.eq(10);\r",
									"   pm.expect(pm.response.json()[\"provider_code\"]).to.eq(\"ABABCB\");\r",
									"   //Check if the self url is correct\r",
									"   const self_url = pm.environment.get(\"app_url\") + \"/child/\" + pm.response.json()[\"id\"];\r",
									"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token_01}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Ari Lastname\",\r\n    \"provider_code\": \"ABABCB\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/child/{{child_id_01}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"child",
								"{{child_id_01}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update child 01 (everything but birthday)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"content is valid\", function () {\r",
									"   //Check if the response content is valid and matches the expected values\r",
									"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Ari Newname\");\r",
									"   pm.expect(pm.response.json()[\"birthday\"]).to.eq(\"2022-06-05\");\r",
									"   pm.expect(pm.response.json()[\"premature_weeks\"]).to.eq(3);\r",
									"   pm.expect(pm.response.json()[\"provider_code\"]).to.eq(\"123456\");\r",
									"   //Check if the self url is correct\r",
									"   const self_url = pm.environment.get(\"app_url\") + \"/child/\" + pm.response.json()[\"id\"];\r",
									"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token_01}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Ari Newname\",\r\n    \"premature_weeks\": 3,\r\n    \"provider_code\": \"123456\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/child/{{child_id_01}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"child",
								"{{child_id_01}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get children of user 01 (3 total)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"content is valid\", function () {   \r",
									"   pm.expect(pm.response.json()[\"total_items\"]).to.eq(3);\r",
									"\r",
									"   let exp_ids = [pm.environment.get(\"child_id_01\"), pm.environment.get(\"child_id_02\"), pm.environment.get(\"child_id_03\")].sort();\r",
									"\r",
									"   let act_ids = [pm.response.json()[\"child\"][0][\"id\"], pm.response.json()[\"child\"][1][\"id\"], pm.response.json()[\"child\"][2][\"id\"]];\r",
									"\r",
									"   // commpare the two lists like here: https://community.postman.com/t/creating-a-request-that-compare-the-array-data-in-2-different-request/33565/2\r",
									"   pm.expect(exp_ids\r",
									"                 .filter(x => !act_ids.includes(x))\r",
									"                 .concat(act_ids.filter(x => !exp_ids.includes(x))).length).to.eq(0);\r",
									"   \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token_01}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/child",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"child"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove child 02 from user 01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 status code\", function () {\r",
									"    //Check for appropriate 204 status code\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token_01}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/child/{{child_id_02}}/users/{{user_id_01}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"child",
								"{{child_id_02}}",
								"users",
								"{{user_id_01}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove child 02 from user 01 (again, should fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"403 status code\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token_01}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/child/{{child_id_02}}/users/{{user_id_01}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"child",
								"{{child_id_02}}",
								"users",
								"{{user_id_01}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get children of user 01 (2 total)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"content is valid\", function () {   \r",
									"   pm.expect(pm.response.json()[\"total_items\"]).to.eq(2);\r",
									"\r",
									"   let exp_ids = [pm.environment.get(\"child_id_01\"), pm.environment.get(\"child_id_03\")].sort();\r",
									"\r",
									"   let act_ids = [pm.response.json()[\"child\"][0][\"id\"], pm.response.json()[\"child\"][1][\"id\"]];\r",
									"\r",
									"   // commpare the two lists like here: https://community.postman.com/t/creating-a-request-that-compare-the-array-data-in-2-different-request/33565/2\r",
									"   pm.expect(exp_ids\r",
									"                 .filter(x => !act_ids.includes(x))\r",
									"                 .concat(act_ids.filter(x => !exp_ids.includes(x))).length).to.eq(0);\r",
									"   \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token_01}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/child",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"child"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Activities",
			"item": [
				{
					"name": "Create activity (invalid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"400 status code\", function () {\r",
									"    //Check for 400 status code\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"400 error message\", function () {\r",
									"     //Check for appropriate error message\r",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request is missing the following required attributes: ['description', 'age_group', 'image_url']\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Missing description and image\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/activities",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"activities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create activity (invalid attribute values)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"400 status code\", function () {\r",
									"    //Check for 400 status code\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"400 error message\", function () {\r",
									"     //Check for appropriate error message\r",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Character limit of 40 for title exceeded; Character limit of 300 for description exceeded; The age_group must be between 0 and 60\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"This title is too long, it exceeds the 40 character limit\",\r\n    \"description\": \"Description too long. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec.\",\r\n    \"age_group\": -1,\r\n    \"image_url\": \"https://media.istockphoto.com/photos/stack-of-pancakes-with-butter-and-honey-on-white-picture-id1288723887?b=1&k=20&m=1288723887&s=612x612&w=0&h=kXTFhItSVv6xJ6Ei6huh5Fb8RpuYzexWHDXolDcyWx4=\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/activities",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"activities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create activity 01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Set boat id environment variable from response\r",
									"pm.environment.set(\"activity_id_01\", pm.response.json()[\"id\"]);\r",
									"\r",
									"pm.test(\"201 status code\", function () {\r",
									"    //Check for 201 status code\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"content is valid\", function () {\r",
									"   //Check if the response content is valid and matches the expected values\r",
									"   pm.expect(pm.response.json()[\"title\"]).to.eq(\"Flipping Pancakes\");\r",
									"   pm.expect(pm.response.json()[\"description\"]).to.eq(\"Trim the corners from an ordinary household sponge to form a “pancake.” Give your child a small skillet and a spatula. Show him how to flip the pancake.\",);\r",
									"   pm.expect(pm.response.json()[\"age_group\"]).to.eq(18);\r",
									"   pm.expect(pm.response.json()[\"image_url\"]).to.eq(\"https://media.istockphoto.com/photos/stack-of-pancakes-with-butter-and-honey-on-white-picture-id1288723887?b=1&k=20&m=1288723887&s=612x612&w=0&h=kXTFhItSVv6xJ6Ei6huh5Fb8RpuYzexWHDXolDcyWx4=\");\r",
									"   pm.expect(pm.response.json()[\"video_url\"]).to.eq(undefined);\r",
									"   //Check if the self url is correct\r",
									"   const self_url = pm.environment.get(\"app_url\") + \"/activities/\" + pm.response.json()[\"id\"];\r",
									"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Flipping Pancakes\",\r\n    \"description\": \"Trim the corners from an ordinary household sponge to form a “pancake.” Give your child a small skillet and a spatula. Show him how to flip the pancake.\",\r\n    \"age_group\": 18,\r\n    \"image_url\": \"https://media.istockphoto.com/photos/stack-of-pancakes-with-butter-and-honey-on-white-picture-id1288723887?b=1&k=20&m=1288723887&s=612x612&w=0&h=kXTFhItSVv6xJ6Ei6huh5Fb8RpuYzexWHDXolDcyWx4=\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/activities",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"activities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create activity 02",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Set boat id environment variable from response\r",
									"pm.environment.set(\"activity_id_02\", pm.response.json()[\"id\"]);\r",
									"\r",
									"pm.test(\"201 status code\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"content is valid\", function () {\r",
									"   pm.expect(pm.response.json()[\"title\"]).to.eq(\"Problem Solving\");\r",
									"   pm.expect(pm.response.json()[\"description\"]).to.eq(\"Let your baby figure out how things work and what they do. Show baby how the switch turns the light on and off. Show him how the flashlight works. Talk to him about what you are doing and why: 'I am putting on a coat because I am cold.'\",);\r",
									"   pm.expect(pm.response.json()[\"age_group\"]).to.eq(10);\r",
									"   pm.expect(pm.response.json()[\"image_url\"]).to.eq(\"https://problem_solve_image.png\");\r",
									"   pm.expect(pm.response.json()[\"video_url\"]).to.eq(undefined);\r",
									"   //Check if the self url is correct\r",
									"   const self_url = pm.environment.get(\"app_url\") + \"/activities/\" + pm.response.json()[\"id\"];\r",
									"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Problem Solving\",\r\n    \"description\": \"Let your baby figure out how things work and what they do. Show baby how the switch turns the light on and off. Show him how the flashlight works. Talk to him about what you are doing and why: 'I am putting on a coat because I am cold.'\",\r\n    \"age_group\": 10,\r\n    \"image_url\": \"https://problem_solve_image.png\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/activities",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"activities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create activity 03",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Set boat id environment variable from response\r",
									"pm.environment.set(\"activity_id_03\", pm.response.json()[\"id\"]);\r",
									"\r",
									"pm.test(\"201 status code\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"content is valid\", function () {\r",
									"   pm.expect(pm.response.json()[\"title\"]).to.eq(\"Roll a Ball\");\r",
									"   pm.expect(pm.response.json()[\"description\"]).to.eq(\"Your baby will enjoy playing with balls. You can sit across from her and roll a ball to her. Encourage her to roll it back. Clap your hands when she does. If the ball is big and soft (like a beach ball), she may be able to try to catch it.\",);\r",
									"   pm.expect(pm.response.json()[\"age_group\"]).to.eq(36);\r",
									"   pm.expect(pm.response.json()[\"image_url\"]).to.eq(\"https://ball.png\");\r",
									"   pm.expect(pm.response.json()[\"video_url\"]).to.eq(undefined);\r",
									"   //Check if the self url is correct\r",
									"   const self_url = pm.environment.get(\"app_url\") + \"/activities/\" + pm.response.json()[\"id\"];\r",
									"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Roll a Ball\",\r\n    \"description\": \"Your baby will enjoy playing with balls. You can sit across from her and roll a ball to her. Encourage her to roll it back. Clap your hands when she does. If the ball is big and soft (like a beach ball), she may be able to try to catch it.\",\r\n    \"age_group\": 36,\r\n    \"image_url\": \"https://ball.png\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/activities",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"activities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create activity 04",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Set boat id environment variable from response\r",
									"pm.environment.set(\"activity_id_04\", pm.response.json()[\"id\"]);\r",
									"\r",
									"pm.test(\"201 status code\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"content is valid\", function () {\r",
									"   pm.expect(pm.response.json()[\"title\"]).to.eq(\"Roll a Ball_48\");\r",
									"   pm.expect(pm.response.json()[\"description\"]).to.eq(\"Your baby will enjoy playing with balls. You can sit across from her and roll a ball to her. Encourage her to roll it back. Clap your hands when she does. If the ball is big and soft (like a beach ball), she may be able to try to catch it.\",);\r",
									"   pm.expect(pm.response.json()[\"age_group\"]).to.eq(48);\r",
									"   pm.expect(pm.response.json()[\"image_url\"]).to.eq(\"https://ball.png\");\r",
									"   pm.expect(pm.response.json()[\"video_url\"]).to.eq(undefined);\r",
									"   //Check if the self url is correct\r",
									"   const self_url = pm.environment.get(\"app_url\") + \"/activities/\" + pm.response.json()[\"id\"];\r",
									"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Roll a Ball_48\",\r\n    \"description\": \"Your baby will enjoy playing with balls. You can sit across from her and roll a ball to her. Encourage her to roll it back. Clap your hands when she does. If the ball is big and soft (like a beach ball), she may be able to try to catch it.\",\r\n    \"age_group\": 48,\r\n    \"image_url\": \"https://ball.png\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/activities",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"activities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create activity 05",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Set boat id environment variable from response\r",
									"pm.environment.set(\"activity_id_05\", pm.response.json()[\"id\"]);\r",
									"\r",
									"pm.test(\"201 status code\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"content is valid\", function () {\r",
									"   pm.expect(pm.response.json()[\"title\"]).to.eq(\"Roll a Ball_54\");\r",
									"   pm.expect(pm.response.json()[\"description\"]).to.eq(\"Your baby will enjoy playing with balls. You can sit across from her and roll a ball to her. Encourage her to roll it back. Clap your hands when she does. If the ball is big and soft (like a beach ball), she may be able to try to catch it.\",);\r",
									"   pm.expect(pm.response.json()[\"age_group\"]).to.eq(54);\r",
									"   pm.expect(pm.response.json()[\"image_url\"]).to.eq(\"https://ball.png\");\r",
									"   pm.expect(pm.response.json()[\"video_url\"]).to.eq(undefined);\r",
									"   //Check if the self url is correct\r",
									"   const self_url = pm.environment.get(\"app_url\") + \"/activities/\" + pm.response.json()[\"id\"];\r",
									"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Roll a Ball_54\",\r\n    \"description\": \"Your baby will enjoy playing with balls. You can sit across from her and roll a ball to her. Encourage her to roll it back. Clap your hands when she does. If the ball is big and soft (like a beach ball), she may be able to try to catch it.\",\r\n    \"age_group\": 54,\r\n    \"image_url\": \"https://ball.png\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/activities",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"activities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create activity 06",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Set boat id environment variable from response\r",
									"pm.environment.set(\"activity_id_06\", pm.response.json()[\"id\"]);\r",
									"\r",
									"pm.test(\"201 status code\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"content is valid\", function () {\r",
									"   pm.expect(pm.response.json()[\"title\"]).to.eq(\"Roll a Ball_60\");\r",
									"   pm.expect(pm.response.json()[\"description\"]).to.eq(\"Your baby will enjoy playing with balls. You can sit across from her and roll a ball to her. Encourage her to roll it back. Clap your hands when she does. If the ball is big and soft (like a beach ball), she may be able to try to catch it.\",);\r",
									"   pm.expect(pm.response.json()[\"age_group\"]).to.eq(60);\r",
									"   pm.expect(pm.response.json()[\"image_url\"]).to.eq(\"https://ball.png\");\r",
									"   pm.expect(pm.response.json()[\"video_url\"]).to.eq(undefined);\r",
									"   //Check if the self url is correct\r",
									"   const self_url = pm.environment.get(\"app_url\") + \"/activities/\" + pm.response.json()[\"id\"];\r",
									"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Roll a Ball_60\",\r\n    \"description\": \"Your baby will enjoy playing with balls. You can sit across from her and roll a ball to her. Encourage her to roll it back. Clap your hands when she does. If the ball is big and soft (like a beach ball), she may be able to try to catch it.\",\r\n    \"age_group\": 60,\r\n    \"image_url\": \"https://ball.png\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/activities",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"activities"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete activity (invalid id)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"404 status code\", function () {",
									"    //Check for 400 status code",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"404 error message\", function () {",
									"     //Check for appropriate error message",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No activities object with this id 1 exists\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/activities/01",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"activities",
								"01"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update activity 01 (invalid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"300 status code\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"400 error message\", function () {\r",
									"     //Check for appropriate error message\r",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request is missing the following required attributes: ['title']\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"Trim the corners from an ordinary household sponge to form a “pancake.” Give your child a small skillet and a spatula. Show him how to flip the pancake. (updated)\",\r\n    \"age_group\": 24,\r\n    \"image_url\": \"https://media.istockphoto.com/photos/stack-of-pancakes-with-butter-and-honey-on-white-picture-id1288723887?b=1&k=20&m=1288723887&s=612x612&w=0&h=kXTFhItSVv6xJ6Ei6huh5Fb8RpuYzexWHDXolDcyWx4=&updated\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/activities/{{activity_id_01}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"activities",
								"{{activity_id_01}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update activity 01 (valid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 status code\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Flipping Pancakes (updated)\",\r\n    \"description\": \"Trim the corners from an ordinary household sponge to form a “pancake.” Give your child a small skillet and a spatula. Show him how to flip the pancake. (updated)\",\r\n    \"age_group\": 24,\r\n    \"image_url\": \"https://media.istockphoto.com/photos/stack-of-pancakes-with-butter-and-honey-on-white-picture-id1288723887?b=1&k=20&m=1288723887&s=612x612&w=0&h=kXTFhItSVv6xJ6Ei6huh5Fb8RpuYzexWHDXolDcyWx4=&updated\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/activities/{{activity_id_01}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"activities",
								"{{activity_id_01}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update activity 01 (age only)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 status code\", function () {\r",
									"    //Check for 201 status code\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"content is valid\", function () {\r",
									"   //Check if the response content is valid and matches the expected values\r",
									"   pm.expect(pm.response.json()[\"title\"]).to.eq(\"Flipping Pancakes (updated)\");\r",
									"   pm.expect(pm.response.json()[\"description\"]).to.eq(\"Trim the corners from an ordinary household sponge to form a “pancake.” Give your child a small skillet and a spatula. Show him how to flip the pancake. (updated)\",);\r",
									"   pm.expect(pm.response.json()[\"age_group\"]).to.eq(10);\r",
									"   pm.expect(pm.response.json()[\"image_url\"]).to.eq(\"https://media.istockphoto.com/photos/stack-of-pancakes-with-butter-and-honey-on-white-picture-id1288723887?b=1&k=20&m=1288723887&s=612x612&w=0&h=kXTFhItSVv6xJ6Ei6huh5Fb8RpuYzexWHDXolDcyWx4=&updated\");\r",
									"   pm.expect(pm.response.json()[\"video_url\"]).to.eq(undefined);\r",
									"   //Check if the self url is correct\r",
									"   const self_url = pm.environment.get(\"app_url\") + \"/activities/\" + pm.response.json()[\"id\"];\r",
									"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"age_group\": 10\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/activities/{{activity_id_01}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"activities",
								"{{activity_id_01}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update activity 01 (everything but age)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 status code\", function () {\r",
									"    //Check for 200 status code\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"content is valid\", function () {\r",
									"   //Check if the response content is valid and matches the expected values\r",
									"   pm.expect(pm.response.json()[\"title\"]).to.eq(\"Flipping Pancakes (updated again)\");\r",
									"   pm.expect(pm.response.json()[\"description\"]).to.eq(\"Trim the corners from an ordinary household sponge to form a “pancake.” Give your child a small skillet and a spatula. Show him how to flip the pancake. (updated again)\",);\r",
									"   pm.expect(pm.response.json()[\"age_group\"]).to.eq(10);\r",
									"   pm.expect(pm.response.json()[\"image_url\"]).to.eq(\"https://media.istockphoto.com/photos/stack-of-pancakes-with-butter-and-honey-on-white-picture-id1288723887?b=1&k=20&m=1288723887&s=612x612&w=0&h=kXTFhItSVv6xJ6Ei6huh5Fb8RpuYzexWHDXolDcyWx4=&updated_again\");\r",
									"   pm.expect(pm.response.json()[\"video_url\"]).to.eq(undefined);\r",
									"   //Check if the self url is correct\r",
									"   const self_url = pm.environment.get(\"app_url\") + \"/activities/\" + pm.response.json()[\"id\"];\r",
									"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Flipping Pancakes (updated again)\",\r\n    \"description\": \"Trim the corners from an ordinary household sponge to form a “pancake.” Give your child a small skillet and a spatula. Show him how to flip the pancake. (updated again)\",\r\n    \"image_url\": \"https://media.istockphoto.com/photos/stack-of-pancakes-with-butter-and-honey-on-white-picture-id1288723887?b=1&k=20&m=1288723887&s=612x612&w=0&h=kXTFhItSVv6xJ6Ei6huh5Fb8RpuYzexWHDXolDcyWx4=&updated_again\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/activities/{{activity_id_01}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"activities",
								"{{activity_id_01}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get activities 01",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/activities/{{activity_id_01}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"activities",
								"{{activity_id_01}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get invalid activity",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/activities/1",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"activities",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all activities (w/ pagination) Copy",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/activities",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"activities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign activity 03 to child 03",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 status code\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token_01}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{app_url}}/child/{{child_id_03}}/activities/{{activity_id_03}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"child",
								"{{child_id_03}}",
								"activities",
								"{{activity_id_03}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign activity 03 to child 03 (again, expect fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"403 status code\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token_01}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{app_url}}/child/{{child_id_03}}/activities/{{activity_id_03}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"child",
								"{{child_id_03}}",
								"activities",
								"{{activity_id_03}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign activity 03 to child 03 (age group mismatch, fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"403 status code\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"404 error message\", function () {\r",
									"     //Check for appropriate error message\r",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Activity age group (48) does not agree with child age group (36)\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token_01}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{app_url}}/child/{{child_id_03}}/activities/{{activity_id_04}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"child",
								"{{child_id_03}}",
								"activities",
								"{{activity_id_04}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "delete activity 01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 no content\", function () {",
									"    //Check for appropriate 204 code",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/activities/{{activity_id_01}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"activities",
								"{{activity_id_01}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete activity 02",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 no content\", function () {",
									"    //Check for appropriate 204 code",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/activities/{{activity_id_02}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"activities",
								"{{activity_id_02}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete activity 03",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 no content\", function () {",
									"    //Check for appropriate 204 code",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/activities/{{activity_id_03}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"activities",
								"{{activity_id_03}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete activity 04",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 no content\", function () {",
									"    //Check for appropriate 204 code",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/activities/{{activity_id_04}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"activities",
								"{{activity_id_04}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete activity 05",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 no content\", function () {",
									"    //Check for appropriate 204 code",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/activities/{{activity_id_05}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"activities",
								"{{activity_id_05}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete activity 06",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 no content\", function () {",
									"    //Check for appropriate 204 code",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/activities/{{activity_id_06}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"activities",
								"{{activity_id_06}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get child 01, confirm activity 02 removed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"content is valid\", function () {\r",
									"    //Check if the content is valid\r",
									"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Ari Newname\");\r",
									"    pm.expect(pm.response.json()[\"birthday\"]).to.eq(\"2022-06-05\");\r",
									"    pm.expect(pm.response.json()[\"premature_weeks\"]).to.eq(3);\r",
									"    pm.expect(pm.response.json()[\"provider_code\"]).to.eq(\"123456\");\r",
									"    pm.expect(pm.response.json()[\"assigned_activities\"]).to.deep.equal([]);\r",
									"    //Check if the self url is correct\r",
									"       const self_url = pm.environment.get(\"app_url\") + \"/child/\" + pm.response.json()[\"id\"];\r",
									"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token_01}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/child/{{child_id_01}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"child",
								"{{child_id_01}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete child 01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 no content\", function () {",
									"    //Check for appropriate 204 code",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token_01}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/child/{{child_id_01}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"child",
								"{{child_id_01}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete child 02 (as user 02, should fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"403 no content\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token_02}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/child/{{child_id_02}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"child",
								"{{child_id_02}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign child 02 to user 01 (so it can be deleted)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 status code\", function () {\r",
									"    //Check for appropriate 204 status code\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token_01}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{app_url}}/child/{{child_id_02}}/users/{{user_id_01}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"child",
								"{{child_id_02}}",
								"users",
								"{{user_id_01}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete child 02 (as user 01, should pass)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 no content\", function () {",
									"    //Check for appropriate 204 code",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token_01}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/child/{{child_id_02}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"child",
								"{{child_id_02}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete child 03",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 no content\", function () {",
									"    //Check for appropriate 204 code",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token_01}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/child/{{child_id_03}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"child",
								"{{child_id_03}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign child 04 to user 02 (so it can be deleted)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 status code\", function () {\r",
									"    //Check for appropriate 204 status code\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token_02}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{app_url}}/child/{{child_id_04}}/users/{{user_id_02}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"child",
								"{{child_id_04}}",
								"users",
								"{{user_id_02}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete child 04",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 no content\", function () {",
									"    //Check for appropriate 204 code",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token_02}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/child/{{child_id_04}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"child",
								"{{child_id_04}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Data Checking",
			"item": [
				{
					"name": "Request users  in XML (invalid, 406)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"406 status code\", function () {\r",
									"    //Check for 406 response code\r",
									"    pm.response.to.have.status(406);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"406 error message\", function () {\r",
									"     //Check for appropriate error message\r",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Unsupported accept_mimetype (application/xml). Only 'application/json' is supported.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{app_url}}/users",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request activities in XML (invalid, 406)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"406 status code\", function () {\r",
									"    //Check for 406 response code\r",
									"    pm.response.to.have.status(406);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"406 error message\", function () {\r",
									"     //Check for appropriate error message\r",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Unsupported accept_mimetype (application/xml). Only 'application/json' is supported.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{app_url}}/activities",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"activities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check invalid method (405)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"405 status code\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"pm.test(\"405 error message\", function () {\r",
									"     //Check for appropriate error message\r",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Method not allowed, refer to API spec for full details.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{app_url}}/users",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}